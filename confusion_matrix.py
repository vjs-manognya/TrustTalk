import pandas as pd
import joblib
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
#import google.generativeai as genai
#genai.configure(api_key="AIzaSyBam890jDotYjjR6k7qJjQ8y_4Q_TEX-Fs")
from sklearn.feature_extraction.text import TfidfVectorizer
import tkinter as tk
from tkinter import messagebox
import speech_recognition as sr
import joblib
import torch
import ipywidgets as widgets
from IPython.display import display
from sklearn.model_selection import train_test_split
from torch import device
from transformers import RobertaTokenizer, RobertaForSequenceClassification
# Load test data
df = pd.read_csv("fraud_call_sample_1000.csv", encoding='latin-1')[['label','transcription']]

# Convert labels to binary (if model expects 0/1)
df['label'] = df['label'].map({'fraud': 1, 'normal': 0})

X_train, X_test, y_train, y_test = train_test_split(df['transcription'], df['label'], test_size=0.2, random_state=42)
# Load model and vectorizer
model_gendata = joblib.load("spam_classifier1.pkl")
vectorizer_gendata = joblib.load("vectorizer1.pkl")

model_textdata = joblib.load("spam_detector_model.pkl")
vectorizer_textdata = joblib.load("tfidf_vectorizer.pkl")

# Transform text and predict
#X_test = vectorizer_gendata.transform(df['transcription'])

X_test_gendata = vectorizer_gendata.transform(X_test)
X_test_textdata = vectorizer_textdata.transform(X_test)

y_pred_gendata = model_gendata.predict(X_test_gendata)
y_pred_textdata = model_textdata.predict(X_test_textdata)


# Evaluation
print("Confusion Matrix :\n", confusion_matrix(y_test, y_pred_gendata))
print("\nClassification Report of MultinomalNB model trained using Synthetic Dataset Generated by ChatGPT:\n", classification_report(y_test, y_pred_gendata))
print("Accuracy Score:", accuracy_score(y_test, y_pred_gendata))

print("Confusion Matrix :\n", confusion_matrix(y_test, y_pred_textdata))
print("\nClassification Report of Logistic Regression model trained using spam call dataset:\n", classification_report(y_test, y_pred_textdata))
print("Accuracy Score:", accuracy_score(y_test, y_pred_textdata))


